package org.northrop.leanne.shopping

/**
    Utility library of combinator functions based on material
    from Paul CHiusano and Runar Bjarnason's book 'Functional Programming in Scala',
    Chapter 6.
*/
package object combinators {
	type State[S,+A] = S => (A,S)

	/** Returns state transition where supplied value and state are returned without modification. */
	def unit[S,A](a:A) : State[S,A] = (s:S) => (a,s)

	/** Returns a state transition where the value is generated by the given
	    function which operates on the outputs of supplied transitions in supplied
	    order. */
	def map2[S,A,B,C](a:State[S,A],b:State[S,B])(f:(A,B)=>C): State[S,C] = {
		s1 => {
			val (aa,s2) = a(s1)
			val (bb,s3) = b(s2)
			(f(aa,bb), s3)
		}
	}	

	/** Returns a state transition which returns a list of results from applying those 
		transitions in sequence*/
	def sequence[S,A](fs:List[State[S,A]]):State[S,List[A]] = {
		val u : State[S, List[A]] = unit(List[A]())
		val f : (State[S,A],State[S, List[A]]) => State[S,List[A]] = (f,acc) => map2(f,acc)(_ :: _)
		fs.foldRight(u)(f)
	}
}